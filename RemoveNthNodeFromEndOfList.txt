Time Complexity: O(n)
Space Complexity: O(1)
Challenge: If we dont use a dummy pointer to start with, then output returns null pointer exception to delete element at beginning.
For example: if input is 1->2->3->4, then to delete element at 4  it returns a null pointer exception.
Approach: Use slow pointer and fast pointer. 
1. Traverse fast pointer until N elements. 
2. Start traversing slow pointer after fast traverses first N elements.
Traverse fast and slow pointer until fast reaches end of the array.
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode pointer=new ListNode(0);
        pointer.next=head;
        ListNode slow=pointer;
        ListNode fast=pointer;
        for(int i=0;i<n;i++){
            fast=fast.next;
        }
        while(fast!=null && fast.next!=null){
            fast=fast.next;
            slow=slow.next;
        }        
        slow.next=slow.next.next;
        return pointer.next;
    }
}